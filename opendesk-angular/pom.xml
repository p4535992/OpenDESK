<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

	<groupId>openDESK</groupId>
    <artifactId>opendesk-angular</artifactId>
    <version>1.5.0-SNAPSHOT</version>
    <name>OpenDesk Frontend</name>
    <!--<packaging>bundle</packaging>-->
    <packaging>war</packaging>
    <description>Manages the lifecycle of the OpenDesk Backend</description>
    
    <properties>
        <!-- Only target Java 7 to support any builds in backporting branches for Alfresco 4.2/5.0 -->
		<jdk>1.8</jdk>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyyMMdd.HHmmss</maven.build.timestamp.format>
		<!-- https://www.beyondjava.net/angular-maven -->
		<node.version>v11.8.0</node.version><!-- v10.16.1 -->
		<npm.version>6.9.0</npm.version><!-- 6.5.0 -->
    </properties>
	
	<!--
	http://blog.nanthrax.net/?p=827
	
	The most important parts are:

    Web-ContextPath - is the context path of our web application.
    Include-Resource - uses the resources content generated by ng build.

	We can now build our bundle, simply using:
	1
		
	$ mvn clean install
	Deployment in Apache Karaf

	Now, the deployment is pretty simple in Apache Karaf.

	On a running Karaf instance, you just have to install the war feature:
	1
		
	karaf@root()> feature:install war

	Now, we directly install our WebBundle:
	1
	2
		
	karaf@root()> bundle:install -s mvn:net.nanthrax/test-frontend/1.0-SNAPSHOT
	Bundle ID: 87	
	-->

   <build>
        <plugins>
        	<!--
        	<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>ng-build</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="target"/>
                                <echo message="Generating frontend resource"/>                                 
                                <exec executable="ng">
                                    <arg value="build"/>
                                </exec>                            
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->
            <!-- https://www.beyondjava.net/angular-maven -->
		    <plugin>
		        <groupId>com.github.eirslett</groupId>
		        <artifactId>frontend-maven-plugin</artifactId>
		        <version>1.9.1</version>
				
		        <configuration>
		            <nodeVersion>${node.version}</nodeVersion>
		            <npmVersion>${npm.version}</npmVersion>
		            <!--  <workingDirectory>src/main/webapp</workingDirectory> -->
		            <workingDirectory>nodejs</workingDirectory>
                	<!--<installDirectory>${project.build.directory}/dist</installDirectory>-->
                	<!--<workingDirectory>${project.build.directory}/dist</workingDirectory>-->		            
		        </configuration>
		
		        <executions>
		        	
					<execution>
						<id>install-node-and-npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<phase>initialize</phase>
						<!--
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>							
						</configuration>
						-->
					</execution>
					<!--
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
			      	-->					
		            <execution>
		                <id>npm run build</id>		                
		                <goals>
		                    <goal>npm</goal>
		                </goals>
		                <phase>generate-resources</phase>
		                <configuration>
		                    <arguments>run-script build</arguments>
		                </configuration>
		            </execution>
		            
					<execution>
				          <id>webpack build dev</id>
				          <goals>
				              <goal>npm</goal>
				          </goals>
				          <phase>generate-resources</phase>
				          <configuration>
				              <arguments>run build</arguments>
				              <npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
				          </configuration>
				     </execution>		            
		        </executions>
		    </plugin>            
         	<!--
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>4.2.1</version>
                <inherited>true</inherited>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <Web-ContextPath>/opendesk</Web-ContextPath>
                        <Private-Package>*</Private-Package>
                        <Include-Resource>dist</Include-Resource>
                    </instructions>
                </configuration>
            </plugin>
            -->
		    <plugin>	
		        <artifactId>maven-war-plugin</artifactId>	
		        <version>3.2.2</version>	
		        <configuration>	
		            <failOnMissingWebXml>false</failOnMissingWebXml>	
		            <!-- Add frontend folder to war package -->	
		            <webResources>	
		                <resource>	
		                    <!-- <directory>src/main/frontend/dist/frontend</directory> -->
		                    <directory>${project.basedir}/dist</directory>
		                </resource>		
		            </webResources>		
		        </configuration>		
		    </plugin>
	       <plugin>
	           <artifactId>maven-resources-plugin</artifactId>
	            <executions>
	               
	               <execution>
	                   <id>copy-resources</id>
	                   <phase>validate</phase>
	                   <goals><goal>copy-resources</goal></goals>
	                   <configuration>
	                       <outputDirectory>${project.build.directory}/classes/resources/</outputDirectory>
	                       <resources>
	                           <resource>
	                               <directory>${project.basedir}/dist/</directory>
	                           </resource>
	                       </resources>
	                   </configuration>
	               </execution>
	               
 					<!-- 
			            Copy of the /frontendResources directory, coming from GIT, in /target directory
			            executed before the compiling and build of frontend resources
			            That dir will be the working directory of npm, bower, grunt
			            in order to avoid the creation of the direcotries node, node_modules, bower_components, ...
			            (they may be committed in repository)
			        -->
			        <!--
			        <execution>
			            <id>copy-frontendResources-toStagingDir-beforeBuild</id>
			            <phase>initialize</phase>
			            <goals>
			                <goal>copy-resources</goal>
			            </goals>
			            <configuration>
			                <outputDirectory>${project.basedir}/target/frontendResourcesStagingDir</outputDirectory>
			                <resources>          
			                    <resource>
			                        <directory>${project.basedir}/src/main/frontendResources</directory>
			                        <filtering>true</filtering>
			                    </resource>
			                </resources>              
			            </configuration>            
			        </execution>
			        -->
			        <!-- 
			            Copy of the /frontendResourcesStagingDir/grunt_output directory in /target/ directory
			            executed after build of frontend resources and before the war pachage creation
			            it contains the output of grunt install execution
			        -->
			        <!--
			        <execution>
			            <id>copy-frontendResources-afterBuild</id>
			            <phase>prepare-package</phase>
			            <goals>
			                <goal>copy-resources</goal>
			            </goals>
			            <configuration>
			                <outputDirectory>${project.basedir}/target/${artifactId}-${version}</outputDirectory>
			                <resources>          
			                    <resource>
			                        <directory>${project.basedir}/target/frontendResourcesStagingDir/grunt_output</directory>
			                        <filtering>true</filtering>
			                    </resource>
			                </resources>              
			            </configuration>            
			        </execution>	               
	                -->
	           </executions>
	       </plugin>		    
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <configuration>
                        <directory>dist</directory>
                        <directory>target</directory>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>