<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>openDESK</groupId>
	<artifactId>opendesk-parent</artifactId>
	<version>1.4.1-SNAPSHOT</version>
	<name>OPENDESK PARENT</name>
	<description></description>
	<packaging>pom</packaging>

	<parent>
		<groupId>de.acosix.alfresco.maven</groupId>
		<artifactId>de.acosix.alfresco.maven.project.parent-5.2.g</artifactId>
		<version>1.2.1</version>
	</parent>

    <properties>
        <!-- Only target Java 7 to support any builds in backporting branches for Alfresco 4.2/5.0 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyyMMdd.HHmmss</maven.build.timestamp.format>

		<!-- ====================== -->
        <!-- Alfresco Community		-->
        <!-- ====================== -->     
        <!-- <sonatypeOssDistMgmtSnapshotsUrl>https://oss.sonatype.org/content/repositories/snapshots/</sonatypeOssDistMgmtSnapshotsUrl> -->
        <!-- Alfresco Maven Plugin version to use -->
		<!-- <alfresco.sdk.version>3.0.1</alfresco.sdk.version> -->
		<alfresco.sdk.version>3.1.0</alfresco.sdk.version>
		<!-- Properties used in dependency declarations, you don't need to change these -->
		<alfresco.groupId>org.alfresco</alfresco.groupId>
		<alfresco.platform.version>5.2.g</alfresco.platform.version>
		<!-- <alfresco.share.version>5.2.f</alfresco.share.version> -->
		<alfresco.version>5.2.g</alfresco.version>
		<!-- Default is to run with a Community edition, change to 'enterprise' if using Enterprise edition -->
		<maven.alfresco.edition>community</maven.alfresco.edition>
		<!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
		<!-- <jrebel.version>1.1.6</jrebel.version> -->
		
		<!-- Alfresco Data directory, which will contain:
                Content Store (i.e. the files we upload)
                Database (i.e. the metadata for the uploaded files)
                Search index (i.e. the indexed content and metadata)
             Configured in alfresco-global.properties with the 'dir.root' property.
                -->
        <alfresco.data.location>${session.executionRootDirectory}/alf_data_dev</alfresco.data.location>
		<alfresco.client.war.folder>${project.build.directory}/${project.build.finalName}-war</alfresco.client.war.folder>
        <!-- Duplicated with alfresco.solrHome in the plugin, we need them out here to do filtering -->
        <solr.home>${alfresco.data.location}/solr</solr.home>
        <solr.model.dir>${solr.home}/alfrescoModels</solr.model.dir>
        <solr.content.dir>${solr.home}/index</solr.content.dir>

        <!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
        <jrebel.version>1.1.6</jrebel.version>

        <!-- Environment to use, Alfresco Maven Plugin will
             copy alfresco-global-*.properties files from this directory, such as src/test/properties/local -->
        <env>local</env>
		
		<!-- Dependency versions -->
		<!-- <postgresql.version>9.4.1212</postgresql.version> -->
		<!-- Se a true con il profilo obusfacate carica i sorgenti java in modo non chiaro  -->
		<obfuscate>true</obfuscate>
    </properties>

	<dependencies>
		<!-- If we are running tests then make the H2 Scripts available. Note. 
			tests are skipped when you are running -Prun -->
		<dependency>
			<groupId>${alfresco.groupId}</groupId>
			<artifactId>alfresco-repository</artifactId>
			<version>${alfresco.version}</version>
			<classifier>h2scripts</classifier>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<!-- Here we realize the connection with the Alfresco selected platform 
		(e.g.version and edition) -->
	<dependencyManagement>
		<dependencies>
			<!-- This will import the dependencyManagement for all artifacts in the 
				selected Alfresco plaftorm (see http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies) 
				NOTE: You still need to define dependencies in your POM, but you can omit 
				version as it's enforced by this dependencyManagement. NOTE: It defaults 
				to the latest version this SDK pom has been tested with, but alfresco version 
				can/should be overridden in your project's pom -->
			<!--
			<dependency>
				<groupId>${alfresco.groupId}</groupId>
				<artifactId>alfresco-platform-distribution</artifactId>
				<version>${alfresco.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			-->
			<dependency>
				<groupId>de.acosix.alfresco.maven</groupId>
				<artifactId>de.acosix.alfresco.maven.project.parent-5.2.g</artifactId>
				<version>1.2.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<modules>		
		<module>backend</module>
		<module>opendesk-repo</module>		
		<module>frontend</module>
		<module>opendesk-angular</module>
	</modules>

    <build>
	  	<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.alfresco.maven.plugin</groupId>
					<artifactId>alfresco-maven-plugin</artifactId>
					<version>${alfresco.sdk.version}</version>
					<executions>
						<execution>
							<id>start-alfresco</id>
							<goals>
								<goal>it</goal>
							</goals>
							<phase>pre-integration-test</phase>
						</execution>
					</executions>
					<configuration>
						<!-- We need the flat file H2 database to run the Repo -->
						<enableH2>true</enableH2>
						<!-- This is a platform extension JAR, so we need the platform webapp 
							(alfresco.war) -->
						<enablePlatform>true</enablePlatform>
						<!-- Enable Solr so we can use search, our Repo extension probably need 
							search -->
						<enableSolr>true</enableSolr>
						<!-- We don't need the share.war if we don't have any UI extensions -->
						<enableShare>false</enableShare>
						<!-- Enable the REST API Explorer -->
						<enableApiExplorer>true</enableApiExplorer>
			
						<!-- JARs and AMPs that should be overlayed/applied to the Platform/Repository 
							WAR (i.e. alfresco.war) -->
						<platformModules>
							<!-- This AMP is needed if we are going to access the platform webapp 
								from a Share webapp -->
							<!-- Share Services will be ignored if you are on Platform earlier than 
								5.1 -->
							<moduleDependency>
								<groupId>${alfresco.groupId}</groupId>
								<artifactId>alfresco-share-services</artifactId>
								<version>${alfresco.share.version}</version>
								<type>amp</type>
							</moduleDependency>
			
							<!-- Bring in this JAR project, need to be included here, otherwise resources 
								from META-INF will not be loaded, such as the test.html page -->
							<moduleDependency>
								<groupId>${project.groupId}</groupId>
								<artifactId>${project.artifactId}</artifactId>
								<version>${project.version}</version>
							</moduleDependency>
							
				        	<moduleDependency>
					            <groupId>de.fmaul</groupId>
					            <artifactId>javascript-console-repo</artifactId>
					            <version>0.6</version>
					            <type>amp</type>
					        </moduleDependency>
						</platformModules>
					</configuration>
				</plugin>
				<plugin>
				  <groupId>org.apache.maven.plugins</groupId>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.1</version>
				  <configuration>
					  <encoding>UTF-8</encoding>
					  <nonFilteredFileExtensions> <!-- jpg, jpeg, gif, bmp and png are added automatically -->
						  <nonFilteredFileExtension>ftl</nonFilteredFileExtension>
						  <nonFilteredFileExtension>acp</nonFilteredFileExtension>
						  <nonFilteredFileExtension>svg</nonFilteredFileExtension>
						  <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
						  <nonFilteredFileExtension>doc</nonFilteredFileExtension>
						  <nonFilteredFileExtension>docx</nonFilteredFileExtension>
						  <nonFilteredFileExtension>xls</nonFilteredFileExtension>
						  <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
						  <nonFilteredFileExtension>ppt</nonFilteredFileExtension>
						  <nonFilteredFileExtension>pptx</nonFilteredFileExtension>
						  <nonFilteredFileExtension>bin</nonFilteredFileExtension>
						  <nonFilteredFileExtension>lic</nonFilteredFileExtension>
						  <nonFilteredFileExtension>swf</nonFilteredFileExtension>
						  <nonFilteredFileExtension>zip</nonFilteredFileExtension>
						  <nonFilteredFileExtension>msg</nonFilteredFileExtension>
						  <nonFilteredFileExtension>jar</nonFilteredFileExtension>
						  <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
						  <nonFilteredFileExtension>eot</nonFilteredFileExtension>
						  <nonFilteredFileExtension>woff</nonFilteredFileExtension>
						  <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
						  <nonFilteredFileExtension>css</nonFilteredFileExtension>
						  <nonFilteredFileExtension>ico</nonFilteredFileExtension>
						  <nonFilteredFileExtension>jks</nonFilteredFileExtension>
						  <nonFilteredFileExtension>p12</nonFilteredFileExtension>
						  <nonFilteredFileExtension>psd</nonFilteredFileExtension>
						  <nonFilteredFileExtension>js</nonFilteredFileExtension>
					  </nonFilteredFileExtensions>
				  </configuration>
				</plugin>	
				<!--
	                Build an AMP if 3rd party libs are needed by the extensions
	                JARs are the default artifact produced in your modules, if you want to build an amp for each module
	                you have to enable this plugin and inspect the src/main/assembly.xml file if you want to customize
	                the layout of your AMP. The end result is that Maven will produce both a JAR file and an AMP with your
	                module.
	            -->
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version><!-- must be the old version 2.6 -->
					<executions>
						<execution>
							<id>build-amp-file</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<configuration>
								<appendAssemblyId>false</appendAssemblyId>
								<descriptor>src/main/assembly/amp.xml</descriptor>
							</configuration>
						</execution>
					</executions>
					<configuration>
						<appendAssemblyId>false</appendAssemblyId>
						<descriptor>src/main/assembly/amp.xml</descriptor>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.alfresco.maven.plugin</groupId>
							<artifactId>alfresco-maven-plugin</artifactId>
							<version>${alfresco.sdk.version}</version>
						</dependency>
					</dependencies>
			  </plugin>	
	
	          <!-- Hot reloading with JRebel -->
	          <plugin>
	              <groupId>org.zeroturnaround</groupId>
	              <artifactId>jrebel-maven-plugin</artifactId>
	              <version>${jrebel.version}</version>
	              <executions>
	                  <execution>
	                      <id>generate-rebel-xml</id>
	                      <phase>process-resources</phase>
	                      <goals>
	                          <goal>generate</goal>
	                      </goals>
	                  </execution>
	              </executions>
	              <configuration>
	                  <!-- For more information about how to configure JRebel plugin see:
	                       http://manuals.zeroturnaround.com/jrebel/standalone/maven.html#maven-rebel-xml -->
	                  <classpath>
	                      <fallback>all</fallback>
	                      <resources>
	                          <resource>
	                              <!--
	                              Empty resource element marks default configuration. By
	                              default it is placed first in generated configuration.
	                              -->
	                          </resource>
	                      </resources>
	                  </classpath>
	
	                  <!--
	                    alwaysGenerate - default is false
	                    If 'false' - rebel.xml is generated if timestamps of pom.xml and the current rebel.xml file are not equal.
	                    If 'true' - rebel.xml will always be generated
	                  -->
	                  <alwaysGenerate>true</alwaysGenerate>
	              </configuration>
	          </plugin>		  
			  
	          <!-- Runs the integration tests, any class that follows naming convention
	                 "**/IT*.java", "**/*IT.java", and "**/*ITCase.java" will be considered an integration test -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-failsafe-plugin</artifactId>
	                <version>2.19.1</version>
	                <executions>
	                    <execution>
	                        <id>integration-test</id>
	                        <phase>integration-test</phase>
	                        <goals>
	                            <goal>integration-test</goal>
	                        </goals>
	                    </execution>
	                    <execution>
	                        <id>verify-test</id>
	                        <phase>verify</phase>
	                        <goals>
	                            <goal>verify</goal>
	                        </goals>
	                    </execution>
	                </executions>
	                <dependencies>
	                    <dependency>
	                        <groupId>org.apache.maven.surefire</groupId>
	                        <artifactId>surefire-junit47</artifactId>
	                        <version>2.19.1</version>
	                    </dependency>
	                </dependencies>
	            </plugin>
		  </plugins>
	  	</pluginManagement>
  	
	</build>

</project>